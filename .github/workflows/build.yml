name: build-matrix

on:
  push:
    branches: [ main, revamp ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  SBOM: "false"            # set to "true" to generate SBOM
  ENABLE_UPX: "false"      # set to "true" to compress binaries with upx on Linux
  MACOS_SIGN: "false"      # set to "true" to enable macOS codesign + notarization

jobs:
  build:
    name: Build ${{ matrix.platform.name }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: linux-x86_64
            runner: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
          - name: linux-aarch64
            runner: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
          - name: macos-x86_64
            runner: macos-13
            target: x86_64-apple-darwin
          - name: macos-arm64
            runner: macos-14
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.platform.runner }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Show versions
        run: |
          rustc -Vv
          cargo -V

      - name: Build (release)
        run: |
          cargo build --locked --release --target ${{ matrix.platform.target }}

      - name: Strip binary
        shell: bash
        run: |
          set -euo pipefail
          BIN=target/${{ matrix.platform.target }}/release/git-acm
          if [ -f "$BIN" ]; then
            strip "$BIN" || true
          fi

      - name: Compress binary with upx (optional, Linux only)
        if: ${{ runner.os == 'Linux' && env.ENABLE_UPX == 'true' }}
        run: |
          sudo apt-get update && sudo apt-get install -y upx
          upx --lzma --best target/${{ matrix.platform.target }}/release/git-acm || true

      - name: Import Apple code-signing certs (macOS only)
        if: ${{ runner.os == 'macOS' && env.MACOS_SIGN == 'true' }}
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.MACOS_CERT_P12 }}
          p12-password: ${{ secrets.MACOS_CERT_PASSWORD }}

      - name: Codesign + Notarize (macOS only)
        if: ${{ runner.os == 'macOS' && env.MACOS_SIGN == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          BIN=target/${{ matrix.platform.target }}/release/git-acm
          codesign --force --options runtime --timestamp --sign "$MACOS_IDENTITY" "$BIN"
          zip -j git-acm.zip "$BIN"
          xcrun notarytool submit git-acm.zip \
            --apple-id "${{ secrets.MACOS_NOTARY_APPLE_ID }}" \
            --team-id "${{ secrets.MACOS_NOTARY_TEAM_ID }}" \
            --password "${{ secrets.MACOS_NOTARY_PASSWORD }}" \
            --wait
          xcrun stapler staple "$BIN"
          rm -f git-acm.zip

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.target }}
          path: |
            target/${{ matrix.platform.target }}/release/git-acm

  package:
    name: Package archives and checksums
    needs: [build]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/raw

      - name: Prepare archive structure
        run: |
          set -euo pipefail
          mkdir -p dist/out
          # Map artifact names to friendly platform names
          for dir in dist/raw/*; do
            name=$(basename "$dir")
            bin="$dir/git-acm"
            case "$name" in
              x86_64-unknown-linux-gnu)
                plat="linux-x86_64" ;;
              aarch64-unknown-linux-gnu)
                plat="linux-aarch64" ;;
              x86_64-apple-darwin)
                plat="darwin-x86_64" ;;
              aarch64-apple-darwin)
                plat="darwin-arm64" ;;
              *)
                echo "Skipping unknown artifact: $name" >&2
                continue ;;
            esac
            pkgdir="dist/package/git-acm-$plat"
            mkdir -p "$pkgdir"
            install -m 0755 "$bin" "$pkgdir/git-acm"
            cp -v LICENSE "$pkgdir/" || true
            cp -v readme.md "$pkgdir/README.md" || true
            tar -C dist/package -czf "dist/out/git-acm-$plat.tar.gz" "git-acm-$plat"
          done

      - name: Generate aggregated checksums
        run: |
          set -euo pipefail
          cd dist/out
          # Prefer sha256sum; fallback to shasum -a 256
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum *.tar.gz > checksums.txt
          else
            shasum -a 256 *.tar.gz > checksums.txt
          fi
          cat checksums.txt

      - name: Upload packaged artifacts
        uses: actions/upload-artifact@v4
        with:
          name: git-acm-archives
          path: |
            dist/out/*.tar.gz
            dist/out/checksums.txt

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.6.0

      - name: Sign archives and checksums (keyless)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          set -euo pipefail
          cd dist/out
          for f in *.tar.gz checksums.txt; do
            echo "Signing $f"
            cosign sign-blob --yes --output-signature "$f.sig" --output-certificate "$f.cert" "$f"
          done

      - name: Upload signatures
        uses: actions/upload-artifact@v4
        with:
          name: git-acm-archives-signatures
          path: |
            dist/out/*.sig
            dist/out/*.cert

      - name: Generate SBOM (optional)
        if: ${{ env.SBOM == 'true' }}
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM (optional)
        if: ${{ env.SBOM == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: git-acm-sbom
          path: sbom.spdx.json


