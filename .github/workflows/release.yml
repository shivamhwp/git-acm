name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  id-token: write

env:
  SBOM: "true"

jobs:
  build:
    name: Build ${{ matrix.platform.name }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: linux-x86_64
            runner: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
          - name: linux-aarch64
            runner: ubuntu-24.04-arm64
            target: aarch64-unknown-linux-gnu
          - name: macos-x86_64
            runner: macos-13
            target: x86_64-apple-darwin
          - name: macos-arm64
            runner: macos-14
            target: aarch64-apple-darwin
          - name: windows-x86_64
            runner: windows-latest
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.platform.runner }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build
        run: cargo build --locked --release --target ${{ matrix.platform.target }}

      - name: Strip binary (Linux/macOS)
        if: ${{ runner.os != 'Windows' }}
        shell: bash
        run: |
          set -euo pipefail
          BIN=target/${{ matrix.platform.target }}/release/git-acm
          if [ -f "$BIN" ]; then
            strip "$BIN" || true
          fi



      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.target }}
          path: |
            target/${{ matrix.platform.target }}/release/git-acm*

  package:
    name: Package, checksum, sign, and release
    needs: [build]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/raw

      - name: Prepare archives
        run: |
          set -euo pipefail
          sudo apt-get update && sudo apt-get install -y zip
          mkdir -p dist/out
          for dir in dist/raw/*; do
            name=$(basename "$dir")
            case "$name" in
              x86_64-unknown-linux-gnu)
                plat="linux-x86_64"; bin="$dir/git-acm"; kind="tar" ;;
              aarch64-unknown-linux-gnu)
                plat="linux-aarch64"; bin="$dir/git-acm"; kind="tar" ;;
              x86_64-apple-darwin)
                plat="darwin-x86_64"; bin="$dir/git-acm"; kind="tar" ;;
              aarch64-apple-darwin)
                plat="darwin-arm64"; bin="$dir/git-acm"; kind="tar" ;;
              x86_64-pc-windows-msvc)
                plat="windows-x86_64"; bin="$dir/git-acm.exe"; kind="zip" ;;
              *) echo "Skipping unknown artifact: $name" >&2; continue ;;
            esac
            pkgdir="dist/package/git-acm-$plat"
            mkdir -p "$pkgdir"
            install -m 0755 "$bin" "$pkgdir/$(basename "$bin")"
            cp -v LICENSE "$pkgdir/" || true
            cp -v readme.md "$pkgdir/README.md" || true
            if [ "$kind" = "tar" ]; then
              tar -C dist/package -czf "dist/out/git-acm-$plat.tar.gz" "git-acm-$plat"
            else
              (cd dist/package && zip -r "../out/git-acm-$plat.zip" "git-acm-$plat")
            fi
          done

      - name: Generate aggregated checksums
        run: |
          set -euo pipefail
          cd dist/out
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum *.tar.gz *.zip > checksums.txt
          else
            shasum -a 256 *.tar.gz *.zip > checksums.txt
          fi
          cat checksums.txt

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.6.0

      - name: Sign archives and checksums (keyless)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          set -euo pipefail
          cd dist/out
          for f in *.tar.gz *.zip checksums.txt; do
            echo "Signing $f"
            cosign sign-blob --yes --output-signature "$f.sig" --output-certificate "$f.cert" "$f"
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/out/*
          generate_release_notes: true
